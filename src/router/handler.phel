(ns phel\router\handler
  (:require phel\router\middleware)
  (:require phel\http :as h))

(defn- compile-handler [middlewares handler]
  (let [middleware-fn (middleware/compose-middleware middlewares)]
    (fn [request] (middleware-fn handler request))))

(defn find-handler
  "Finds the handler for given route match and request-method keyword (:get, :post, ...).
   If no handler can be found nil is returned."
  [match request-method middleware]
  (let [route-data (:data match)
        request-method-data (get route-data request-method)
        data (if request-method-data (deep-merge route-data request-method-data) route-data)
        middleware (concat middleware (get data :middleware []))]
    (when (:handler data)
      [(compile-handler middleware (:handler data)) data])))

(defn create-default-handler
  "Create a default handler that handles the following cases, configured via options.

   | key                   | description |
   | ----------------------|-------------|
   | `:not-found`          | 404, no route matches
   | `:method-not-allowed` | 405, no method matches
   | `:not-acceptable`     | 406, handler returned `nil`"
  [{:not-found not-found :method-not-allowed method-not-allowed :not-acceptable not-acceptable}]
  (let [not-found (or not-found (fn [req] (h/response-from-map {:status 404 :body "Not found"})))
        method-not-allowed (or method-not-allowed (fn [req] (h/response-from-map {:status 405 :body "Method not allowed"})))
        not-acceptable (or not-acceptable (fn [req] (h/response-from-map {:status 405 :body "Not acceptable"})))]
    (fn [request]
      (let [route (get-in request [:attributes :route])]
        (if route
          (let [method (-> request :method php/strtolower keyword)
                handler (find-handler route method nil)]
            (if handler
              (not-acceptable request)
              (method-not-allowed request)))
          (not-found request))))))

(defn enrich-request [request match route-data]
  (-> request
      (update-in [:attributes :match] match)
      (update-in [:attributes :route-data] route-data)))
